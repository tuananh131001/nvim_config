return {
  -- {
  --   "folke/noice.nvim",
  --   event = "VeryLazy",
  --   vim.keymap.set("n", "<leader>nd", function()
  --     require("noice").cmd("dismiss")
  --   end),
  --   opts = {
  --     presets = {
  --       bottom_search = true,
  --       long_message_to_split = true, -- long messages will be sent to a split
  --       inc_rename = false,           -- enables an input dialog for inc-rename.nvim
  --       routes = {
  --
  --         filter = {
  --           event = "msg_show",
  --           any = {
  --             { find = "%d+L, %d+B" },
  --             { find = "; after #%d+" },
  --             { find = "; before #%d+" },
  --             { find = "%d fewer lines" },
  --             { find = "%d more lines" },
  --           },
  --         },
  --         opts = { skip = true },
  --       },
  --     },
  --   },
  --   dependencies = {
  --     "MunifTanjim/nui.nvim",
  --     "rcarriga/nvim-notify",
  --   },
  -- },
  -- {
  --   'echasnovski/mini.animate',
  --   version = '*',
  --   event = "VeryLazy",
  --   cond = vim.g.neovide == nil,
  --   opts = function(_, opts)
  --     -- don't use animate when scrolling with the mouse
  --     local mouse_scrolled = false
  --     for _, scroll in ipairs({ "Up", "Down" }) do
  --       local key = "<ScrollWheel" .. scroll .. ">"
  --       vim.keymap.set({ "", "i" }, key, function()
  --         mouse_scrolled = true
  --         return key
  --       end, { expr = true })
  --     end
  --
  --     vim.api.nvim_create_autocmd("FileType", {
  --       pattern = "grug-far",
  --       callback = function()
  --         vim.b.minianimate_disable = true
  --       end,
  --     })
  --
  --     local animate = require("mini.animate")
  --     return vim.tbl_deep_extend("force", opts, {
  --       resize = {
  --         timing = animate.gen_timing.linear({ duration = 50, unit = "total" }),
  --       },
  --       scroll = {
  --         timing = animate.gen_timing.linear({ duration = 150, unit = "total" }),
  --         subscroll = animate.gen_subscroll.equal({
  --           predicate = function(total_scroll)
  --             if mouse_scrolled then
  --               mouse_scrolled = false
  --               return false
  --             end
  --             return total_scroll > 1
  --           end,
  --         }),
  --       },
  --     })
  --   end,
  -- },
}
